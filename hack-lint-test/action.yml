name: "HackLintTest"
description: "Runs the Hack typechecker, linter (HHAST) and tests (HackTest)"
inputs:
  hhvm:
    description: "HHVM version (latest/nightly/#.##)"
    required: true
  skip_lint:
    description: 'Optional. Set to "true" to skip the hhast-lint step.'
    required: false
    default: false
  lint_engine:
    description: >
      Optional. Can either be "hhast" or "pha", defaults to "hhast".
      "hhast" will invoke vendor/hhvm/hhast/bin/hhast-lint
      "pha" will invoke vendor/hershel-theodore-layton/portable-hack-ast-linters-server/bin/portable-hack-ast-linters-server-bundled.resource
    required: false
    default: "hhast"
  lint_args:
    description: "Optional. Command line arguments for your linter."
    required: false
  skip_tests:
    description: 'Optional. Set to "true" to skip the hacktest step.'
    required: false
    default: false
  hhvm_flags:
    description: "Optional. Command line arguments that will be added to all `hhvm` invocations (hh-autoload, hhast-lint, hacktest)."
    required: false
runs:
  using: "composite"
  steps:
    - name: Install Composer
      shell: bash
      run: ${{github.action_path}}/install-composer.sh --install-dir=${{runner.temp}}
    - name: Install HHVM
      shell: bash
      run: ${{github.action_path}}/install-hhvm.sh ${{inputs.hhvm}}
    - name: Install Watchman
      shell: bash
      run: ${{github.action_path}}/install-watchman.sh
    - name: Inspect HHVM and Hack versions
      shell: bash
      run: |
        hhvm --version
        hh_client --version
    - if: github.ref_type != 'tag'
      shell: bash
      run: echo "COMPOSER_ROOT_VERSION=dev-${{github.base_ref || github.ref_name}}" >> $GITHUB_ENV
    - name: Install project dependencies
      shell: bash
      run: |
        echo "::group::Install project dependencies"
        FLAGS=""
        VERSION_SPECIFIC_COMPOSER="composer.${{inputs.hhvm}}.json"

        if [ -n "${{inputs.hhvm_flags}}" ]; then
          FLAGS="--no-autoloader"
        fi

        if [ -f $VERSION_SPECIFIC_COMPOSER ]; then
          COMPOSER=$VERSION_SPECIFIC_COMPOSER
        elif [ -f "composer.dev.json" ]; then
          COMPOSER="composer.dev.json"
        else
          COMPOSER="composer.json"
        fi

        echo "Using $COMPOSER"

        COMPOSER=$COMPOSER php ${{runner.temp}}/composer.phar install $FLAGS
        echo "::endgroup::"
    - name: Generate autoload map
      shell: bash
      run: |
        echo "::group::Generate autoload map"

        INIT='self::initBootstrapAutoloader();'

        if [ -f vendor/hhvm/hhvm-autoload/bin/hh-autoload.hack ]; then
          echo "Patch hhvm-autoload to only search for the hsl if not already built-in."

          sed -i "s/$INIT/if (\\!\\\\class_exists('HH\\\\Lib\\\\Ref')) { $INIT }/g" \
            vendor/hhvm/hhvm-autoload/bin/hh-autoload.hack
        fi

        (
          set -x
          hhvm ${{inputs.hhvm_flags}} vendor/hhvm/hhvm-autoload/bin/hh-autoload
        )
        cat vendor/autoload.hack
        hhvm --php ${{inputs.hhvm_flags}} -r "echo (\function_exists('HH\Facts\enabled') && \HH\Facts\enabled() ? 'Using ext_watchman' : 'Using hhvm-autoload');"
        echo "::endgroup::"
    - name: Typecheck
      shell: bash
      run: |
        echo "::group::Typecheck"
        hh_client
        echo "::endgroup::"
    - name: Lint
      shell: bash
      run: |
        ${{github.action_path}}/lint.sh \
          "${{inputs.hhvm}}" \
          "${{inputs.skip_lint}}" \
          "${{inputs.hhvm_flags}}" \
          "${{inputs.lint_engine}}" \
          "${{inputs.lint_args}}"
    - name: Run tests
      shell: bash
      run: |
        ${{github.action_path}}/test.sh \
          "${{inputs.skip_tests}}" \
          "${{inputs.hhvm_flags}}"
